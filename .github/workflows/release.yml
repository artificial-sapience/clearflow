name: Release

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.5.11"

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      versionTag: ${{ steps.gitversion.outputs.majorMinorPatch }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for GitVersion
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4
      with:
        versionSpec: '6.x'
        
    - name: Calculate version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v4
        
    - name: Display calculated version
      run: |
        echo "Calculated version: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: version
    environment: pypi  # Requires approval for PyPI publishing
    permissions:
      id-token: write  # For trusted PyPI publishing
      contents: write  # For creating GitHub releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        
    - name: Install dependencies
      run: |
        uv sync --all-extras
        
    - name: Update version in pyproject.toml
      run: |
        # Update the version in pyproject.toml
        sed -i "s/^version = \".*\"/version = \"${{ needs.version.outputs.versionTag }}\"/" pyproject.toml
        echo "Building release version: ${{ needs.version.outputs.versionTag }}"
        
    - name: Build package
      run: |
        uv build
        
    - name: Check dist contents
      run: |
        ls -la dist/
        
    - name: Create and push tag
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        TAG="v${{ needs.version.outputs.versionTag }}"
        git tag -a "$TAG" -m "Release $TAG"
        git push origin "$TAG"
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        
    - name: Publish GitHub Release
      run: |
        # Get the most recent draft release
        DRAFT_TAG=$(gh api repos/${{ github.repository }}/releases --jq '[.[] | select(.draft == true)] | first | .tag_name')

        if [ -z "$DRAFT_TAG" ] || [ "$DRAFT_TAG" = "null" ]; then
          echo "::error::No draft release found"
          exit 1
        fi

        # First, update the draft with the correct tag but keep it as draft
        gh release edit "$DRAFT_TAG" \
          --tag "v${{ needs.version.outputs.versionTag }}" \
          --title "v${{ needs.version.outputs.versionTag }}" \
          --draft=true

        # Upload built artifacts to the draft release
        gh release upload "v${{ needs.version.outputs.versionTag }}" dist/* --clobber

        # Finally, publish the release (making it immutable)
        gh release edit "v${{ needs.version.outputs.versionTag }}" \
          --draft=false \
          --latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}